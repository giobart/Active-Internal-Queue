// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: frameStreamService.proto

package streamgRPCspec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FramesStreamServiceClient is the client API for FramesStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FramesStreamServiceClient interface {
	// NextFrame send the next frame
	StreamFrames(ctx context.Context, in *Frame, opts ...grpc.CallOption) (FramesStreamService_StreamFramesClient, error)
}

type framesStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFramesStreamServiceClient(cc grpc.ClientConnInterface) FramesStreamServiceClient {
	return &framesStreamServiceClient{cc}
}

func (c *framesStreamServiceClient) StreamFrames(ctx context.Context, in *Frame, opts ...grpc.CallOption) (FramesStreamService_StreamFramesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FramesStreamService_ServiceDesc.Streams[0], "/FramesStreamService/StreamFrames", opts...)
	if err != nil {
		return nil, err
	}
	x := &framesStreamServiceStreamFramesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FramesStreamService_StreamFramesClient interface {
	Recv() (*Frame, error)
	grpc.ClientStream
}

type framesStreamServiceStreamFramesClient struct {
	grpc.ClientStream
}

func (x *framesStreamServiceStreamFramesClient) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FramesStreamServiceServer is the server API for FramesStreamService service.
// All implementations must embed UnimplementedFramesStreamServiceServer
// for forward compatibility
type FramesStreamServiceServer interface {
	// NextFrame send the next frame
	StreamFrames(*Frame, FramesStreamService_StreamFramesServer) error
	mustEmbedUnimplementedFramesStreamServiceServer()
}

// UnimplementedFramesStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFramesStreamServiceServer struct {
}

func (UnimplementedFramesStreamServiceServer) StreamFrames(*Frame, FramesStreamService_StreamFramesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFrames not implemented")
}
func (UnimplementedFramesStreamServiceServer) mustEmbedUnimplementedFramesStreamServiceServer() {}

// UnsafeFramesStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FramesStreamServiceServer will
// result in compilation errors.
type UnsafeFramesStreamServiceServer interface {
	mustEmbedUnimplementedFramesStreamServiceServer()
}

func RegisterFramesStreamServiceServer(s grpc.ServiceRegistrar, srv FramesStreamServiceServer) {
	s.RegisterService(&FramesStreamService_ServiceDesc, srv)
}

func _FramesStreamService_StreamFrames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Frame)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FramesStreamServiceServer).StreamFrames(m, &framesStreamServiceStreamFramesServer{stream})
}

type FramesStreamService_StreamFramesServer interface {
	Send(*Frame) error
	grpc.ServerStream
}

type framesStreamServiceStreamFramesServer struct {
	grpc.ServerStream
}

func (x *framesStreamServiceStreamFramesServer) Send(m *Frame) error {
	return x.ServerStream.SendMsg(m)
}

// FramesStreamService_ServiceDesc is the grpc.ServiceDesc for FramesStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FramesStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FramesStreamService",
	HandlerType: (*FramesStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFrames",
			Handler:       _FramesStreamService_StreamFrames_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "frameStreamService.proto",
}
